{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useGameLogic.js\nimport { useState, useEffect } from \"react\";\nconst difficulties = {\n  Easy: 16,\n  Medium: 50,\n  Difficult: 100\n};\nconst bombCounts = {\n  Easy: 2,\n  Medium: 5,\n  Difficult: 10\n};\nconst useGameLogic = () => {\n  _s();\n  const [hoverCount, setHoverCount] = useState(0);\n  const [difficulty, setDifficulty] = useState(\"\");\n  const [totalSquares, setTotalSquares] = useState(0);\n  const [resetKey, setResetKey] = useState(0);\n  const [isHoverEnabled, setIsHoverEnabled] = useState(false);\n  const [startIndex, setStartIndex] = useState(null);\n  const [startTime, setStartTime] = useState(null);\n  const [elapsedTime, setElapsedTime] = useState(null);\n  const [isDefeated, setIsDefeated] = useState(false);\n  const [bombIndices, setBombIndices] = useState([]);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameEnded, setGameEnded] = useState(false);\n  const handleHover = isBomb => {\n    if (gameEnded) return;\n    if (isBomb) {\n      handleBombHover();\n    } else {\n      setHoverCount(prevCount => prevCount + 1);\n    }\n  };\n  const handleBombHover = () => {\n    setIsDefeated(true);\n    setIsHoverEnabled(false);\n    setElapsedTime((Date.now() - startTime) / 1000);\n    setGameEnded(true);\n  };\n  const generateBombIndices = (difficulty, startIndex) => {\n    const bombCount = bombCounts[difficulty];\n    const bombIndices = new Set();\n    while (bombIndices.size < bombCount) {\n      const randomIndex = Math.floor(Math.random() * difficulties[difficulty]);\n      if (randomIndex !== startIndex) {\n        bombIndices.add(randomIndex);\n      }\n    }\n    return Array.from(bombIndices);\n  };\n  const handleDifficultyChange = selectedDifficulty => {\n    const startIndex = Math.floor(Math.random() * difficulties[selectedDifficulty]);\n    const bombIndices = generateBombIndices(selectedDifficulty, startIndex);\n    setDifficulty(selectedDifficulty);\n    setTotalSquares(difficulties[selectedDifficulty]);\n    setHoverCount(0);\n    setResetKey(prevKey => prevKey + 1);\n    setIsHoverEnabled(false);\n    setStartIndex(startIndex);\n    setStartTime(null);\n    setElapsedTime(null);\n    setIsDefeated(false);\n    setBombIndices(bombIndices);\n    setGameStarted(false);\n    setGameEnded(false);\n  };\n  const handleStartClick = () => {\n    setIsHoverEnabled(true);\n    setStartTime(Date.now());\n    setGameStarted(true);\n  };\n  const handleReset = () => {\n    const startIndex = Math.floor(Math.random() * totalSquares);\n    const bombIndices = generateBombIndices(difficulty, startIndex);\n    setHoverCount(0);\n    setResetKey(prevKey => prevKey + 1);\n    setIsHoverEnabled(false);\n    setStartIndex(startIndex);\n    setStartTime(null);\n    setElapsedTime(null);\n    setIsDefeated(false);\n    setBombIndices(bombIndices);\n    setGameStarted(false);\n    setGameEnded(false);\n  };\n  useEffect(() => {\n    if (hoverCount === totalSquares - bombCounts[difficulty] - 1) {\n      setElapsedTime((Date.now() - startTime) / 1000);\n      setGameEnded(true);\n    }\n  }, [hoverCount, totalSquares, bombCounts, difficulty, startTime]);\n  return {\n    hoverCount,\n    difficulty,\n    totalSquares,\n    resetKey,\n    isHoverEnabled,\n    startIndex,\n    elapsedTime,\n    isDefeated,\n    bombIndices,\n    gameStarted,\n    gameEnded,\n    handleHover,\n    handleBombHover,\n    handleDifficultyChange,\n    handleStartClick,\n    handleReset,\n    bombCounts // Export bombCounts to be used in App.js\n  };\n};\n_s(useGameLogic, \"vNwO4KLs1LOFL9cjQRnwnylzGpY=\");\nexport default useGameLogic;","map":{"version":3,"names":["useState","useEffect","difficulties","Easy","Medium","Difficult","bombCounts","useGameLogic","_s","hoverCount","setHoverCount","difficulty","setDifficulty","totalSquares","setTotalSquares","resetKey","setResetKey","isHoverEnabled","setIsHoverEnabled","startIndex","setStartIndex","startTime","setStartTime","elapsedTime","setElapsedTime","isDefeated","setIsDefeated","bombIndices","setBombIndices","gameStarted","setGameStarted","gameEnded","setGameEnded","handleHover","isBomb","handleBombHover","prevCount","Date","now","generateBombIndices","bombCount","Set","size","randomIndex","Math","floor","random","add","Array","from","handleDifficultyChange","selectedDifficulty","prevKey","handleStartClick","handleReset"],"sources":["/Users/frankliu/Desktop/grid-app/src/hooks/useGameLogic.js"],"sourcesContent":["// src/hooks/useGameLogic.js\nimport { useState, useEffect } from \"react\";\n\nconst difficulties = {\n  Easy: 16,\n  Medium: 50,\n  Difficult: 100,\n};\n\nconst bombCounts = {\n  Easy: 2,\n  Medium: 5,\n  Difficult: 10,\n};\n\nconst useGameLogic = () => {\n  const [hoverCount, setHoverCount] = useState(0);\n  const [difficulty, setDifficulty] = useState(\"\");\n  const [totalSquares, setTotalSquares] = useState(0);\n  const [resetKey, setResetKey] = useState(0);\n  const [isHoverEnabled, setIsHoverEnabled] = useState(false);\n  const [startIndex, setStartIndex] = useState(null);\n  const [startTime, setStartTime] = useState(null);\n  const [elapsedTime, setElapsedTime] = useState(null);\n  const [isDefeated, setIsDefeated] = useState(false);\n  const [bombIndices, setBombIndices] = useState([]);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameEnded, setGameEnded] = useState(false);\n\n  const handleHover = (isBomb) => {\n    if (gameEnded) return;\n    if (isBomb) {\n      handleBombHover();\n    } else {\n      setHoverCount((prevCount) => prevCount + 1);\n    }\n  };\n\n  const handleBombHover = () => {\n    setIsDefeated(true);\n    setIsHoverEnabled(false);\n    setElapsedTime((Date.now() - startTime) / 1000);\n    setGameEnded(true);\n  };\n\n  const generateBombIndices = (difficulty, startIndex) => {\n    const bombCount = bombCounts[difficulty];\n    const bombIndices = new Set();\n    while (bombIndices.size < bombCount) {\n      const randomIndex = Math.floor(Math.random() * difficulties[difficulty]);\n      if (randomIndex !== startIndex) {\n        bombIndices.add(randomIndex);\n      }\n    }\n    return Array.from(bombIndices);\n  };\n\n  const handleDifficultyChange = (selectedDifficulty) => {\n    const startIndex = Math.floor(\n      Math.random() * difficulties[selectedDifficulty]\n    );\n    const bombIndices = generateBombIndices(selectedDifficulty, startIndex);\n\n    setDifficulty(selectedDifficulty);\n    setTotalSquares(difficulties[selectedDifficulty]);\n    setHoverCount(0);\n    setResetKey((prevKey) => prevKey + 1);\n    setIsHoverEnabled(false);\n    setStartIndex(startIndex);\n    setStartTime(null);\n    setElapsedTime(null);\n    setIsDefeated(false);\n    setBombIndices(bombIndices);\n    setGameStarted(false);\n    setGameEnded(false);\n  };\n\n  const handleStartClick = () => {\n    setIsHoverEnabled(true);\n    setStartTime(Date.now());\n    setGameStarted(true);\n  };\n\n  const handleReset = () => {\n    const startIndex = Math.floor(Math.random() * totalSquares);\n    const bombIndices = generateBombIndices(difficulty, startIndex);\n\n    setHoverCount(0);\n    setResetKey((prevKey) => prevKey + 1);\n    setIsHoverEnabled(false);\n    setStartIndex(startIndex);\n    setStartTime(null);\n    setElapsedTime(null);\n    setIsDefeated(false);\n    setBombIndices(bombIndices);\n    setGameStarted(false);\n    setGameEnded(false);\n  };\n\n  useEffect(() => {\n    if (hoverCount === totalSquares - bombCounts[difficulty] - 1) {\n      setElapsedTime((Date.now() - startTime) / 1000);\n      setGameEnded(true);\n    }\n  }, [hoverCount, totalSquares, bombCounts, difficulty, startTime]);\n\n  return {\n    hoverCount,\n    difficulty,\n    totalSquares,\n    resetKey,\n    isHoverEnabled,\n    startIndex,\n    elapsedTime,\n    isDefeated,\n    bombIndices,\n    gameStarted,\n    gameEnded,\n    handleHover,\n    handleBombHover,\n    handleDifficultyChange,\n    handleStartClick,\n    handleReset,\n    bombCounts, // Export bombCounts to be used in App.js\n  };\n};\n\nexport default useGameLogic;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}